<h1>Developer Documentation - OneDrinkAway Beta Release</h1>


<h2>Setup</h2>


<p>These instructions apply to the UW CSE VM, which is running Fedora 19. However, they should be very similar for other distributions of Linux, such as ubuntu.</p>


<p>First, you will need to setup the Android Development Kit. You can either set-up your existing copy of eclipse, or use the copy that is included in the ADT Bundle. It can be helpful to rename the unzipped adt folder to something shorter, such as ‘adt’.</p>


<p><a href="http://developer.android.com/sdk/index.html">Set-up and instructions for the ADT Bundle can be found here.</a></p>


<p>Once you have the Android development kit setup, start eclipse and import both v7-appcompat, as well as the latest release of OneDrinkAway.</p>


<p>Both projects are available on our <a href="http://www.onedrinkaway.ava4.net/downloadPage.php">download page</a>.</p>


<p><a href="https://github.com/teamGaia/OneDrinkAway">Instructions for importing a project can be found here.</a></p>


<p>Once you have both project imported into eclipse, you need to tell eclipse that v7-appcompat is a library. In the Package Explorer in eclipse, right click on v7-appcompat, then select Properties. In upper left corner of the pop-up window, Select Android. Verify that the ‘is Library’ box is checked, and select OK. Here is a helpful screenshot:</p>


<p><img src="http://www.onedrinkaway.ava4.net/img/isLibrary.png"></p>


<p>Next you will need to go to the same menu for OneDrinkAway. Right click on OneDrinkAway in the Project Explorer, select Properties, and select Android in the pop-up. Here you will need to remove the Reference that has a big red X by it. Select it and press Remove. Now select Add and double click on v7-appcompat. Press OK and you’re done. Here are some helpful screenshots:</p>


<p><img src="http://www.onedrinkaway.ava4.net/img/removeX.png"></p>


<p><img src="http://www.onedrinkaway.ava4.net/img/addLibrary.png"></p>


<p>If you are using a 64-bit Linux distribution (such as the CSE VM) You may need to install a few libraries. On The CSE VM, this can be done with: sudo yum install zlib.i686 libstdc++.i686</p>


<p>At this point you should be ready to build OneDrinkAway. Congratulations!</p>


<h2>Building</h2>


<p>OneDrinkAway can be built from eclipse, or from the command line with ant. By default, eclipse has build automatically selected. To generate the .apk file (which will install the app on an android device) setup an emulator, then select OneDrinkAway and press run in eclipse. This will generate OneDrinkAway.apk, which can be found in the bin folder of the project. This file can be side-loaded onto an Android device. To side-load, simply copy the .apk file to an android device, select the file and it will run the installer.</p>


<p>OneDrinkAway can also be built and run from the terminal. It is slightly more involved, but it must be done to set-up daily builds.</p>


<p>First, your machine must have ant installed. This is already included on the UW CSE VM, but can be installed via sudo apt-get install ant or sudo yum install ant from most Linux distributions.</p>


<p>Next, we need to define the path for the android tool. In the terminal, run:</p>


<p>export ANDROID_HOME=~/path/to/build-tools</p>
<p>replacing /path/to/build-tools with the actual path to the build-tools folder found in your sdk folder. If you extracted the adt package to your home directory on the linux vm, and renamed it ‘adt’ it would be:</p>


<p>export ANDROID_HOME=~/adt/sdk</p>


<p>Next, run:</p>
<p>export PATH=$ANDROID_HOME/tools:$PATH</p>
<p>and</p>
<p>export PATH=$ANDROID_HOME/platform-tools:$PATH</p>
<p>Now, navigate to the appcompat-v7 project and run</p>
<p>android update project -p .</p>
<p>Next, navigate to the OneDrinkAway project and run:</p>
<p>android update project --name OneDrinkAway -p .</p>
<p>Now you can use ant to build, test and produce releases of our wonderful application. For instance, to build a new release, try:</p>
<p>ant clean debug</p>
<p>Which should output OneDrinkAway-debug.apk in the bin folder.</p>
<h2>Directory Structure</h2>
<p>OneDrinkAway - Main project directory containing all code and resources
<ul>
<li><ul>src - stores packages that contain source code
<li><ul>com
<li><ul>onedrinkaway
<li>app - stores source code for android app</li>
<li>db - stores source code for the database</li>
<li>model - stores source code for model classes such as Drink, Flavor, Query</li>
<li>machinelearning - stores source code for machine learning</li>
                        </ul></li>
                </ul></li>
        </ul></li>
<li>documentation - stores documents</li>
<li><ul>res - stores resources files
<li>drawable-* - stores .png icons of various sizes.</li>
<li>layout - stores XML files defining the layout of the app's UI</li>
<li>menu - stores XML files defining the layout of the app's action bar</li>
<li>values-* - stores variable names and values</li>
</ul></li>
<li>gen - stores generated files for all resources defined in res folder</li>
<li>assets - stores read-only files, such as drinks and recipe info.</li>
<li>settings - stores preferences file</li>
</ul>
</p>
<h2>Bug Tracker</h2>
<p>Our bug tracker can <a href="https://github.com/teamGaia/OneDrinkAway/issues">found here</a>. The listings under the open tab are the list of outstanding bugs and the listings under the closed tab are the resolved bugs. In order to resolve a bug, you check the checkbox corresponding to the particular bug and hit the close button on the top toolbar.</p>
<h2>Daily Builds</h2>
<p>Here are instructions for setting up daily builds.</p>
<p><a href="http://mirrors.jenkins-ci.org/war/latest/jenkins.war">Download Jenkins here.</a></p>
<p>Navigate to the directory that you downloaded in into and run the following command:</p>
<p>java -jar jenkins.war</p>
<p>Once Jenkins is up and running, open an Internet browser and go to </p>
<p>http://localhost:8080</p>
<p>Click on “New Item” and enter in a sensible name and select the “Build a free-style software project” then hit ok.</p>
<p>Scroll down until you reach the build section and select “Execute Shell” from the “Add a build step” dropdown menu.</p>
<p>Paste the following lines into the command text box, replacing the <> with the correct information for your system:</p>
<p>export ANDROID_HOME=<Path to your local android sdk installation></p>
<p>export PATH=$ANDROID_HOME/tools:$PATH</p>
<p>export PATH=$ANDROID_HOME/platform-tools:$PATH</p>
<p>android update project -p <Path to your local appcompat-v7 project></p>
<p>android update project --name OneDrinkAway -p <Path to your local OneDrinkAway project></p>
<p>cd <Path to your local OneDrinkAway project></p>
<p>ant clean debug</p>
<p>(In future releases most of this will be handled by a script but for now this is the process)</p>
<p>To schedule daily builds, check the "Build Periodically" box and then paste</p>
<p>H H 1-31 * * </p>
<p>in the "Schedule" text box</p>
<p>All that is left to do is click save and click on "Build Now" which will compile everything and run tests. The build status will be displayed on the left hand side of the page and detailed information about each build can be examined by clicking on the date next to the build number.</p>
<p>Our build setup differs from the above step only in that we have email notification in case of a failed build. To set up email notification, you will need to go to "Configure Project" then under "Post Build Actions," "Add post-build action" then select "E-mail Notification". Add the desired email recipients then navigate back to the Jenkins Dashboard. Once there go to "Manage Jenkins" -> "Configure System" then scroll down to "E-Mail Notification" and hit advanced. Fill out all the fields with the appropriate information. We use the gmail SMTP server with SMTP authentication, SSL and port 465 as our SMTP port.</p>




<h2>Testing</h2>
<p>Our test suite is located is currently located in it’s own repository, which can be <a href=”>https://github.com/teamGaia/JavaUnitTests”>found here.</a></p>
<p>To run our test suite, download the project as a zip, and import it into eclipse. Next, right click on the project, and select Properties. Select Java Build Path and click on the Projects tab. Click Add… and select OneDrinkAway. This will allow you imports from the OneDrinkAway project.</p>
<p>To run our test suite, simply select a package in the UnitTests project and select run as>JUnit test.</p>


<h2>Repository</h2>
<p>Our repository can be <a href="https://github.com/teamGaia/OneDrinkAway">found here</a>, hosted on github.</p>
<p>If you are new to git, a great primer can be <a href="http://www.onedrinkaway.ava4.net/contact.php">found here</a>.</p>
<p>To push to our repository, you need to be a collaborator on our project. <a href="http://www.onedrinkaway.ava4.net/contact.php">Contact us</a> if you need to become a collaborator.</p>
<h2>Branching</h2>
<p>Creating a new branch is fairly easy. First, navigate to the OneDrinkAway project folder, and run:</p>
<p>git checkout -b <branch name></p>
<p>Replacing <branch name> with the branch name you want to create. If you are a collaborator on the OneDrinkAway project, you can push your branch to github with:</p>
<p>git push origin <branch name></p>
<h2>Merging</h2>
<p>To merge your branch with master, first you need to switch back to master:</p>
<p>git checkout master</p>
<p>Then merge the two:</p>
<p>git merge <branch name></p>
<h2>Creating a New Release</h2>
<p>To create a new release, visit:</p>
<p><a href="http://www.onedrinkaway.ava4.net/contact.php">https://github.com/teamGaia/OneDrinkAway/releases/new</a></p>
-- instructions here for creating .apk and .zip</p>
<p>Last, rename your .apk to onedrinkaway<release name>.apk, and rename your .zip to <release name>release.zip, to keep them consistent with our previous releases.</p>
<p>All of our releases have release-specific user and developer documentation. To create updated documents for your new release, simply download the user and developer docs for the release you started with, and edit them to reflect the changes you have made.</p>
<h2>Uploading to Our Website</h2>
<p>Our website is currently hosted by dreamhost, and can be found at <a href="http://www.onedrinkaway.ava4.net/contact.php">www.onedrinkaway.ava4.net</a>. To publish a new release, it needs to be added to the Download page, and updated documentation should be added to the Release page. Using FileZilla or another file transfer program, connect to the dreamhost server. You will need to <a href="http://www.onedrinkaway.ava4.net/contact.php">contact us</a> to gain the proper credentials.</p>
<p>First, upload your .zip and .apk files to the dl folder. Next, download downloadPage.php, and add a link to each file under "Releases:" and "Source Code:". Releases are kept in descending order, so put yours at the top. Now upload your edited downloadPage.php, replacing the existing copy. Next, download releasePage.php. Now add a new heading at the top "Your Release Name", and put two paragraph tags under it, the first linking to your updated user documentation, the second linking to your updated developer documentation.</p>
<p>Finally, ensure all of your changes work! We recommend starting with a clean copy of the UW CSE VM, and follow all of your developer setup instructions start to finish, ensuring you encounter no new errors along the way. Verify that your files download and import properly, and that everything displays correctly on the website.</p>
<h2>Design Patterns</h2>
<p>Singleton: DrinkData is our primary data structure. It stores every Drink and all it’s relevant info. We want our app to run quickly with minimal lag, so keeping local memory usage down is important. DrinkData ensures that there is only once instance of each Drink and DrinkInfo for each drink in our database, and maintains only one instance of itself. We accomplish this through a private constructor, with a few public accessor fields that only return a pointer the single private instance.</p>
<p>Adapter: DrinkDb is an adapter between DrinkData and DrinkModel. It primarily functions as a collection of static classes, maintaining a static pointer to the singleton DrinkData, and passing data from DrinkData to DrinkModel. It will also send updates to the database, updating local and remote storage simultaneously.</p>
